Two-Sum Problem

Question 
--
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.

Approach
--
Intuition

We need to find two numbers in the array that sum up to a given target. Instead of using a brute-force approach that checks all pairs (which would be too slow), we can leverage a hash table (dictionary) to store numbers weâ€™ve seen so far and quickly check if their complement exists.

Approach
Create a hash table (num_map) to store numbers along with their indices.

Iterate through the array:

Compute the complement of the current number (target - num).

Check if the complement is already in the hash table.

If it is, return the indices of the complement and the current number.

Otherwise, store the current number with its index in the hash table.

Since there is exactly one solution, we are guaranteed to find a valid pair.


Complexity
Time complexity: O(n)

Space complexity: O(n)

Solution
--

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        num_map = {}  # Hash table to store number and its index
        for i, num in enumerate(nums):
            complement = target - num  # Find the complement
            if complement in num_map:
                return [num_map[complement], i]  # Return indices of complement and current number
            num_map[num] = i  # Store the number with its index
